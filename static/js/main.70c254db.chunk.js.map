{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Contact.js","components/About.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Navbar","className","href","to","Home","posts","this","props","postList","length","map","post","key","id","title","body","Component","connect","state","Contact","About","Post","handleClick","deletePost","history","push","console","log","onClick","ownProps","post_id","match","params","find","dispatch","idPostForDel","type","App","exact","path","component","Boolean","window","location","hostname","initState","userId","store","createStore","action","newPosts","filter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70c254db.chunk.js","sourcesContent":["import React from \"react\";\r\n// import About from \"./About\";\r\n// import Contact from \"./Contact\";\r\n// import Home from \"./Home\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper indigo darken-4\">\r\n                <div className=\"container\">\r\n                    <a href=\"/messpa/\" className=\"brand-logo left\">\r\n                        MesSPA\r\n                    </a>\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        <li>\r\n                            <NavLink to=\"/messpa/\">Home</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"/messpa/contact\">Contact</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"/messpa/about\">About</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Home extends Component {\r\n    render () {\r\n        const { posts } = this.props;\r\n        const postList = posts.length ? (\r\n            posts.map (post => {\r\n                return (\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <div className=\"card-content\">\r\n                            <Link to={'/messpa/' + post.id} >\r\n                                <span className=\"card-title\">{post.title}</span>\r\n                            </Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"center\">No posts yet</div>\r\n        )\r\n        return (\r\n            <div className=\"container\">\r\n                <h4 className=\"center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.posts\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps)(Home)","import React from 'react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">Contact</h4>\r\n        <p>lorem ipsum</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">About</h4>\r\n        <p>lorem ipsum</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { deletePost } from '../actions/postActions';\r\n\r\nclass Post extends Component {\r\n\r\n    handleClick = () => {\r\n        this.props.deletePost (this.props.post.id)\r\n        this.props.history.push ('/messpa')\r\n}\r\n\r\n    render () {\r\n        console.log('t ',this.props);\r\n        const post = this.props.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.props.post.title}</h4>\r\n                <p>{this.props.post.body}</p>\r\n                <div className=\"center\" >\r\n                    <button className=\"btn grey\" onClick={this.handleClick} >Delete post</button>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <div className=\"center\">Loading post...</div>\r\n        )\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                { post }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//loading params from props of this component. these params added to its props by Router.\r\n//take id from router.params.history, get post_id from \"address bar\"\r\n//check all state and find a post with that post_id\r\n//drop it to props of this component by redux.connect. Use it as this.props.post later.\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let post_id = ownProps.match.params.post_id; \r\n    return {\r\n        post: state.posts.find( post => post.id === post_id )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deletePost: (idPostForDel) => { dispatch (deletePost(idPostForDel))  }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)\r\n","import React from 'react'\r\n\r\nexport const deletePost = (id) => {\r\n    return {\r\n        type: \"DELETE_POST\",\r\n        id\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\";\n// import \"./App.css\";\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport About from './components/About';\nimport Post from './components/Post';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Navbar />\n                    <Switch>\n                        <Route exact path=\"/messpa/\" component={Home} />\n                        <Route path=\"/messpa/contact\" component={Contact} />\n                        <Route path=\"/messpa/about\" component={About} />\n                        <Route path=\"/messpa/:post_id\" component={Post} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst initState = {\r\n    posts: [\r\n        {\r\n            userId: \"1\",\r\n            id: \"10\",\r\n            title: \"optio molestias id quia eum\",\r\n            body:\r\n                \"quo et expedita modi cum officia vel magni\\ndoloribus qui repudiandae\\nvero nisi sit\\nquos veniam quod sed accusamus veritatis error\"\r\n        },\r\n        {\r\n            userId: \"2\",\r\n            id: \"11\",\r\n            title: \"et ea vero quia laudantium autem\",\r\n            body:\r\n                \"delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\\naccusamus in eum beatae sit\\nvel qui neque voluptates ut commodi qui incidunt\\nut animi commodi\"\r\n        },\r\n        {\r\n            userId: \"2\",\r\n            id: \"12\",\r\n            title: \"in quibusdam tempore odit est dolorem\",\r\n            body:\r\n                \"itaque id aut magnam\\npraesentium quia et ea odit et ea voluptas et\\nsapiente quia nihil amet occaecati quia id voluptatem\\nincidunt ea est distinctio odio\"\r\n        }\r\n    ]\r\n};\r\n\r\nexport const rootReducer = (state = initState, action) => {\r\n    if (action.type === \"DELETE_POST\") {\r\n        let newPosts = state.posts.filter(post => post.id !== action.id )\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n    return state;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render( <Provider store = {store} >\n                    <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}