{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Contact.js","components/About.js","components/Post.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Navbar","className","href","to","Home","state","posts","axios","get","then","res","console","log","setState","data","slice","this","postList","length","map","post","key","id","title","body","Component","Contact","About","Post","newId","props","match","params","post_id","App","exact","path","component","Boolean","window","location","hostname","initState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PA+BeA,EAzBA,WACX,OACI,6BACI,yBAAKC,UAAU,+BACX,yBAAKA,UAAU,aACX,uBAAGC,KAAK,IAAID,UAAU,mBAAtB,UAGA,wBAAIA,UAAU,8BACV,4BACI,kBAAC,IAAD,CAASE,GAAG,KAAZ,SAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,YAAZ,YAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,UAAZ,e,yBCsBbC,E,2MAvCXC,MAAQ,CACJC,MAAO,I,mFAEU,IAAD,OAChBC,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAU,CACXP,MAAOI,EAAII,KAAKC,MAAM,EAAG,W,+BAI9B,IACCT,EAAUU,KAAKX,MAAfC,MACFW,EAAWX,EAAMY,OACnBZ,EAAMa,KAAK,SAAAC,GACP,OACI,yBAAKnB,UAAU,YAAYoB,IAAKD,EAAKE,IACjC,yBAAKrB,UAAU,gBACX,kBAAC,IAAD,CAAME,GAAI,IAAMiB,EAAKE,IACjB,0BAAMrB,UAAU,cAAcmB,EAAKG,QAEvC,2BAAIH,EAAKI,WAMzB,yBAAKvB,UAAU,UAAf,gBAEJ,OACI,yBAAKA,UAAU,aACX,wBAAIA,UAAU,UAAd,QACCgB,O,GAlCEQ,aCQJC,EAVC,WACZ,OACI,yBAAKzB,UAAU,aACf,wBAAIA,UAAU,UAAd,WACA,4CCMO0B,EAVD,WACV,OACI,yBAAK1B,UAAU,aACf,wBAAIA,UAAU,UAAd,SACA,4CCHa2B,E,2MACjBvB,MAAQ,CACJe,KAAM,M,mFAEW,IAAD,OACZS,EAAQb,KAAKc,MAAMC,MAAMC,OAAOC,QACpC1B,IAAMC,IAAI,8CAA+CqB,GACpDpB,MAAK,SAAAC,GACF,EAAKG,SAAS,CACVO,KAAMV,EAAII,Y,+BAMtB,IAAMM,EAAOJ,KAAKX,MAAMe,KACpB,yBAAKnB,UAAU,QACX,wBAAIA,UAAU,UAAUe,KAAKX,MAAMe,KAAKG,OACxC,2BAAIP,KAAKX,MAAMe,KAAKI,OAGxB,yBAAKvB,UAAU,UAAf,mBAGJ,OACI,yBAAKA,UAAU,aACTmB,O,GA1BgBK,aCwBnBS,E,iLAhBP,OACI,kBAAC,IAAD,KACI,yBAAKjC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAOgC,KAAK,WAAWC,UAAWX,IAClC,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOS,KAAK,YAAYC,UAAWT,W,GAVzCH,aCGEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2D,oBChBAW,EAAY,CACdpC,MAAO,ICMLqC,EAAQC,aDHa,WAAgC,IAA/BvC,EAA8B,uDAAtBqC,EAAsB,iCACtD,OAAQrC,KCIZwC,IAASC,OAAQ,kBAAC,IAAD,CAAUH,MAASA,GAChB,kBAAC,EAAD,OACSI,SAASC,eAAe,SFsH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.791f095c.chunk.js","sourcesContent":["import React from \"react\";\r\n// import About from \"./About\";\r\n// import Contact from \"./Contact\";\r\n// import Home from \"./Home\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper indigo darken-4\">\r\n                <div className=\"container\">\r\n                    <a href=\"/\" className=\"brand-logo left\">\r\n                        MesSPA\r\n                    </a>\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        <li>\r\n                            <NavLink to=\"/\">Home</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"/contact\">Contact</NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to=\"/about\">About</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => {\r\n                console.log(res)\r\n                this.setState ({\r\n                    posts: res.data.slice(0, 10)\r\n                })\r\n            })\r\n    }\r\n    render () {\r\n        const { posts } = this.state;\r\n        const postList = posts.length ? (\r\n            posts.map (post => {\r\n                return (\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <div className=\"card-content\">\r\n                            <Link to={'/' + post.id} >\r\n                                <span className=\"card-title\">{post.title}</span>\r\n                            </Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"center\">No posts yet</div>\r\n        )\r\n        return (\r\n            <div className=\"container\">\r\n                <h4 className=\"center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">Contact</h4>\r\n        <p>lorem ipsum</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n        <h4 className=\"center\">About</h4>\r\n        <p>lorem ipsum</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class Post extends Component {\r\n    state = {\r\n        post: null\r\n    }\r\n    componentDidMount() {\r\n        let newId = this.props.match.params.post_id;\r\n        axios.get('https://jsonplaceholder.typicode.com/posts/'+ newId)\r\n            .then(res => {\r\n                this.setState({\r\n                    post: res.data\r\n                })\r\n            })\r\n        \r\n    }\r\n    render() {\r\n        const post = this.state.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.state.post.title}</h4>\r\n                <p>{this.state.post.body}</p>\r\n            </div>\r\n        ) : (\r\n            <div className=\"center\">Loading post...</div>\r\n        )\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                { post }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\n// import \"./App.css\";\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport About from './components/About';\nimport Post from './components/Post';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Navbar />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route path=\"/contact\" component={Contact} />\n                        <Route path=\"/about\" component={About} />\n                        <Route path=\"/:post_id\" component={Post} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst initState = {\r\n    posts: []\r\n}\r\n\r\nexport const rootReducer = (state = initState, action) => {\r\n    return (state)\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render( <Provider store = {store} >\n                    <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}